// Generated by CoffeeScript 1.9.3
(function() {
  var config, cwd, definedModule, injector, path, self,
    slice = [].slice;

  path = require('path');

  cwd = process.cwd();

  definedModule = null;

  config = {
    bypassInjection: true
  };

  self = {
    inject: function(moduleWrapperFn) {
      definedModule = null;
      moduleWrapperFn["import"] = self._import;
      return definedModule = config.bypassInjection ? moduleWrapperFn.call(moduleWrapperFn) : moduleWrapperFn.bind(moduleWrapperFn);
    },
    getModule: function() {
      var t;
      t = definedModule;
      definedModule = null;
      return t;
    },
    bypassInjection: function(boolean) {
      return config.bypassInjection = boolean;
    },
    _import: function() {
      var filePath, fragsLen, isNpmModule, moduleName, pathFragments, ref;
      pathFragments = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      fragsLen = pathFragments.length;
      moduleName = pathFragments[fragsLen - 1].split('/').pop();
      if (((ref = this.dependencies) != null ? ref[moduleName] : void 0) != null) {
        return this.dependencies[moduleName];
      } else {
        isNpmModule = pathFragments[0].indexOf('/') === -1;
        if (fragsLen === 1) {
          if (isNpmModule) {
            filePath = pathFragments[0];
          } else {
            pathFragments.splice(0, 0, cwd);
            filePath = path.resolve.apply(this, pathFragments);
          }
        } else {
          filePath = path.resolve.apply(this, pathFragments);
        }
        return require(filePath);
      }
    },
    getStatus: function() {
      return config;
    }
  };

  injector = self.inject;

  injector.getModule = self.getModule;

  injector.bypassInjection = self.bypassInjection;

  injector.getStatus = self.getStatus;

  module.exports = injector;

}).call(this);

//# sourceMappingURL=index.js.map
